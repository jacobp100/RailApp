//  Automatically generated by the FlatBuffers compiler, do not modify.            
//  SwiftFlatBuffers, licensed under the Apache License, Version 2.0, is from FlatBuffers.            
//            
//  SwiftFlatBuffers  <https://github.com/TonyStark106/SwiftFlatBuffers>            
//

import Foundation
import SwiftFlatBuffers

public final class Stop: FBTable {

    public final lazy var stationId: UInt16 = {
        return self.getUInt16(vOffset: 4)
    }()

    public final lazy var arrivalTime: UInt16 = {
        return self.getUInt16(vOffset: 6)
    }()

    public final lazy var departureTime: UInt16 = {
        return self.getUInt16(vOffset: 8)
    }()

    public final lazy var platform: String? = {
        return self.getString(vOffset: 10)
    }()

    public final override var hardPos: FBOffset {
        return 18
    }

    public final override var hardSize: UInt {
        return 32
    }

    public final override func toFBData() -> Data {
        let temp = Stop()
        temp._add_stationId(i: self)
        temp._add_arrivalTime(i: self)
        temp._add_departureTime(i: self)
        temp._add_platform(i: self)
        return temp.bbData
    }

}

extension Stop {

    fileprivate final func _add_stationId(i: Stop) {
        set(vOffset: 4, pOffset: 4, value: i.stationId)
    }

    fileprivate final func _add_arrivalTime(i: Stop) {
        set(vOffset: 6, pOffset: 6, value: i.arrivalTime)
    }

    fileprivate final func _add_departureTime(i: Stop) {
        set(vOffset: 8, pOffset: 8, value: i.departureTime)
    }

    fileprivate final func _add_platform(i: Stop) {
        set(vOffset: 10, pOffset: 10, value: i.platform)
    }

}

public final class Route: FBTable {

    public final lazy var routeId: String? = {
        return self.getString(vOffset: 4)
    }()

    public final lazy var operatingDays: UInt8 = {
        return self.getUInt8(vOffset: 6)
    }()

    public final lazy var dateFrom: UInt16 = {
        return self.getUInt16(vOffset: 8)
    }()

    public final lazy var dateTo: UInt16 = {
        return self.getUInt16(vOffset: 10)
    }()

    public final lazy var stops: [Stop]? = {
        return self.getTables(type: Stop.self, vOffset: 12)
    }()

    public final override var hardPos: FBOffset {
        return 20
    }

    public final override var hardSize: UInt {
        return 37
    }

    public final override func toFBData() -> Data {
        let temp = Route()
        temp._add_routeId(i: self)
        temp._add_operatingDays(i: self)
        temp._add_dateFrom(i: self)
        temp._add_dateTo(i: self)
        temp._add_stops(i: self)
        return temp.bbData
    }

}

extension Route {

    fileprivate final func _add_routeId(i: Route) {
        set(vOffset: 4, pOffset: 4, value: i.routeId)
    }

    fileprivate final func _add_operatingDays(i: Route) {
        set(vOffset: 6, pOffset: 8, value: i.operatingDays)
    }

    fileprivate final func _add_dateFrom(i: Route) {
        set(vOffset: 8, pOffset: 9, value: i.dateFrom)
    }

    fileprivate final func _add_dateTo(i: Route) {
        set(vOffset: 10, pOffset: 11, value: i.dateTo)
    }

    fileprivate final func _add_stops(i: Route) {
        set(vOffset: 12, pOffset: 13, value: i.stops)
    }

}

public final class Root: FBTable {

    public final lazy var routes: [Route]? = {
        return self.getTables(type: Route.self, vOffset: 4)
    }()

    public final override var hardPos: FBOffset {
        return 12
    }

    public final override var hardSize: UInt {
        return 20
    }

    public final override func toFBData() -> Data {
        let temp = Root()
        temp._add_routes(i: self)
        return temp.bbData
    }

}

extension Root {

    fileprivate final func _add_routes(i: Root) {
        set(vOffset: 4, pOffset: 4, value: i.routes)
    }

}

